{"version":3,"sources":["types/SelectFilter.ts","components/TodoList/TodoList.tsx","utils/helper.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SelectFilter","TodoList","todos","selectedTodo","onClick","className","map","todo","isSelected","classNames","id","completed","title","type","transform","toLowerCase","handleTodoStatusChange","setSelectFilter","event","target","value","ACTIVE","COMPLETED","ALL","TodoFilter","query","setQuery","reset","selectFilter","onChange","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","onClose","useState","user","setUser","isLoading","setIsLoading","fetchUser","useCallback","a","fetchedUser","message","Error","alert","useEffect","href","email","name","App","setTodos","setSelectedTodo","fetchTodos","loadedTodos","resetQuery","showModal","visibleTodos","useMemo","filter","isInclude","includes","getFiltredToDos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfadf2cf.chunk.js","sourcesContent":["export enum SelectFilter {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  onClick: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  onClick,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const isSelected = todo === selectedTodo;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n            className={classNames(\n              { 'has-background-info-light': isSelected },\n            )}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onClick(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye': !isSelected,\n                    'fa-eye-slash': isSelected,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { SelectFilter } from '../types/SelectFilter';\nimport { Todo } from '../types/Todo';\n\nconst transform = (title: string) => title.toLowerCase();\n\nexport const getFiltredToDos = (\n  todos: Todo[], selectFilter: SelectFilter, query: string,\n) => {\n  const filtredToDos = todos.filter(todo => {\n    const { title } = todo;\n    const isInclude = transform(title).includes(transform(query));\n\n    switch (selectFilter) {\n      case SelectFilter.ACTIVE:\n        return !todo.completed && isInclude;\n\n      case SelectFilter.COMPLETED:\n        return todo.completed && isInclude;\n\n      case SelectFilter.ALL:\n      default:\n        return isInclude;\n    }\n  });\n\n  return filtredToDos;\n};\n\nexport function handleTodoStatusChange(\n  setSelectFilter: (selectFilter: SelectFilter) => void,\n) {\n  return (event: React.ChangeEvent<HTMLSelectElement>) => {\n    switch (event.target.value) {\n      case SelectFilter.ACTIVE:\n        setSelectFilter(SelectFilter.ACTIVE);\n        break;\n      case SelectFilter.COMPLETED:\n        setSelectFilter(SelectFilter.COMPLETED);\n        break;\n      case SelectFilter.ALL:\n      default:\n        setSelectFilter(SelectFilter.ALL);\n    }\n  };\n}\n","import React from 'react';\nimport { SelectFilter } from '../../types/SelectFilter';\nimport { handleTodoStatusChange } from '../../utils/helper';\n\ntype Props = {\n  query: string,\n  setQuery: (query: string) => void,\n  reset: () => void,\n  selectFilter: SelectFilter,\n  setSelectFilter: (selectFilter: SelectFilter) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  setQuery,\n  reset,\n  selectFilter,\n  setSelectFilter,\n}) => {\n  //  const handleTodoStatusCahnge = (\n  //   event: React.ChangeEvent<HTMLSelectElement>,\n  // ) => {\n  //   switch (event.target.value) {\n  //     case SelectFilter.ACTIVE:\n  //       setSelectFilter(SelectFilter.ACTIVE);\n  //       break;\n  //     case SelectFilter.COMPLETED:\n  //       setSelectFilter(SelectFilter.COMPLETED);\n  //       break;\n  //     case SelectFilter.ALL:\n  //     default:\n  //       setSelectFilter(SelectFilter.ALL);\n  //   }\n  // };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectFilter}\n            onChange={handleTodoStatusChange(setSelectFilter)}\n          >\n            <option value={SelectFilter.ALL}>All</option>\n            <option value={SelectFilter.ACTIVE}>Active</option>\n            <option value={SelectFilter.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={reset}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable no-alert */\nimport classNames from 'classnames';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo;\n  onClose: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User>();\n  const [isLoading, setIsLoading] = useState(true);\n\n  const {\n    id,\n    title,\n    userId,\n    completed,\n  } = todo;\n\n  const fetchUser = useCallback(async () => {\n    setIsLoading(true);\n\n    try {\n      const fetchedUser = await getUser(userId);\n\n      setUser(fetchedUser);\n    } catch (error) {\n      const message = error instanceof Error\n        ? error.message\n        : 'Unexpected error';\n\n      alert(message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={onClose}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong className={\n                  classNames({\n                    'has-text-success': completed,\n                    'has-text-danger': !completed,\n                  })\n                }\n                >\n                  {completed ? 'Done' : 'Planned'}\n                </strong>\n\n                {' by '}\n\n                {user && (\n                  <a href={`mailto:${user.email}`}>\n                    {user.name}\n                  </a>\n                )}\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable no-alert */\n/* eslint-disable max-len */\nimport React, {\n  useEffect, useState, useCallback, useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoModal } from './components/TodoModal';\nimport { SelectFilter } from './types/SelectFilter';\nimport { getFiltredToDos } from './utils/helper';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [query, setQuery] = useState('');\n  const [selectFilter, setSelectFilter] = useState<SelectFilter>(SelectFilter.ALL);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const fetchTodos = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const loadedTodos = await getTodos();\n\n      setTodos(loadedTodos);\n    } catch (error) {\n      const message = error instanceof Error\n        ? error.message\n        : 'Unexpected error';\n\n      alert(message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const resetQuery = useCallback(() => {\n    setQuery('');\n  }, []);\n\n  const showModal = useCallback(\n    (todo: Todo) => {\n      setSelectedTodo(todo);\n    },\n    [],\n  );\n\n  const hideModal = () => {\n    setSelectedTodo(null);\n  };\n\n  const visibleTodos = useMemo(() => {\n    return getFiltredToDos(todos, selectFilter, query);\n  }, [selectFilter, query, todos]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                reset={resetQuery}\n                selectFilter={selectFilter}\n                setSelectFilter={setSelectFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodo={selectedTodo}\n                    onClick={showModal}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal todo={selectedTodo} onClose={hideModal} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}